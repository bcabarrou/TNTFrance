<?php
/**
 * This class has been generated by TheliaStudio
 * For more information, see https://github.com/thelia-modules/TheliaStudio
 */

namespace TNTFrance;

use Propel\Runtime\Connection\ConnectionInterface;
use Symfony\Component\Filesystem\Filesystem;
use Thelia\Core\HttpFoundation\Request;
use Thelia\Core\Translation\Translator;
use Thelia\Install\Database;
use Thelia\Model\AddressQuery;
use Thelia\Model\ConfigQuery;
use Thelia\Model\Country;
use Thelia\Model\LangQuery;
use Thelia\Model\Message;
use Thelia\Model\MessageQuery;
use Thelia\Model\MetaData;
use Thelia\Model\MetaDataQuery;
use Thelia\Model\OrderPostage;
use Thelia\Module\AbstractDeliveryModule;
use Thelia\Module\Exception\DeliveryException;
use TNTFrance\Model\Config\TNTFranceConfigValue;

/**
 * Class TNTFrance
 * @package TNTFrance
 */
class TNTFrance extends AbstractDeliveryModule
{
    const MESSAGE_DOMAIN = "tntfrance";
    const ROUTER = "router.tntfrance";
    const METADATA_KEY_ORDER = 'tntfrance';
    const METADATA_CART_KEY = 'cart';

    const DEFAULT_PRODUCTS_ENABLED = 'N,A,T,M,J,P';
    const DEFAULT_OPTIONS_ENABLED = 'P,W,D,Z,E';

    /** @var Translator $translator */
    protected $translator;

    public function postActivation(ConnectionInterface $con = null)
    {
        $database = new Database($con);
        $database->insertSql(null, [__DIR__ . "/Config/create.sql"]);

        $this->initializeConfig();

        $this->initializeMessage();
    }

    protected function initializeMessage()
    {
        // create new message
        if (null === MessageQuery::create()->findOneByName('mail_tnt_france')) {
            $message = new Message();
            $message
                ->setName('mail_tnt_france')
                ->setHtmlTemplateFileName('mail-tnt-france.html')
                ->setHtmlLayoutFileName('')
                ->setTextTemplateFileName('mail-tnt-france.txt')
                ->setTextLayoutFileName('')
                ->setSecured(0);

            $languages = LangQuery::create()->find();

            foreach ($languages as $language) {
                $locale = $language->getLocale();

                $message->setLocale($locale);
                $message->setSubject(
                    $this->trans('Your order {$order_ref} has been shipped.', [], $locale)
                );
                $message->setTitle(
                    $this->trans('TNT France shipping message', [], $locale)
                );
            }

            $message->save();
        }
    }

    protected function initializeConfig()
    {
        $defaults = [
            TNTFranceConfigValue::ENABLED => 0,
            TNTFranceConfigValue::MODE_PRODUCTION => 0,
            TNTFranceConfigValue::ACCOUNT_NUMBER => '',
            TNTFranceConfigValue::USERNAME => '',
            TNTFranceConfigValue::PASSWORD => '',
            TNTFranceConfigValue::USE_INDIVIDUAL => 1,
            TNTFranceConfigValue::USE_ENTERPRISE => 1,
            TNTFranceConfigValue::USE_DEPOT => 1,
            TNTFranceConfigValue::USE_DROPOFFPOINT => 1,
            TNTFranceConfigValue::PRODUCTS_ENABLED => self::DEFAULT_PRODUCTS_ENABLED,
            TNTFranceConfigValue::OPTIONS_ENABLED => self::DEFAULT_OPTIONS_ENABLED,
            TNTFranceConfigValue::REGULAR_PICKUP => 0,
            TNTFranceConfigValue::SENDER_NAME => ConfigQuery::read('store_name', ''),
            TNTFranceConfigValue::SENDER_ADDRESS1 => ConfigQuery::read('store_address1', ''),
            TNTFranceConfigValue::SENDER_ADDRESS2 => ConfigQuery::read('store_address2', ''),
            TNTFranceConfigValue::SENDER_ZIP_CODE => ConfigQuery::read('store_zipcode', ''),
            TNTFranceConfigValue::SENDER_CITY => ConfigQuery::read('store_city', ''),
            TNTFranceConfigValue::CONTACT_LASTNAME => '',
            TNTFranceConfigValue::CONTACT_FIRSTNAME => '',
            TNTFranceConfigValue::CONTACT_EMAIL => ConfigQuery::read('store_email', ''),
            TNTFranceConfigValue::CONTACT_PHONE => ConfigQuery::read('store_phone', ''),
            TNTFranceConfigValue::NOTIFICATION_EMAILS => ConfigQuery::read('store_notification_emails', ''),
            TNTFranceConfigValue::NOTIFICATION_SUCCESS => 0,
            TNTFranceConfigValue::LABEL_FORMAT => "STDA4",
            TNTFranceConfigValue::FREE_SHIPPING => 0,
            TNTFranceConfigValue::TRACKING_URL => 'http://www.tnt.fr/public/suivi_colis/recherche/visubontransport.do?radiochoixrecherche=BT&bonTransport=%tracking-number%',
        ];

        foreach ($defaults as $configName => $configValue) {
            if (null === self::getConfigValue($configName)) {
                self::setConfigValue($configName, $configValue);
            }
        }
    }

    /**
     * This method is called by the Delivery  loop, to check if the current module has to be displayed to the customer.
     * Override it to implements your delivery rules/
     *
     * If you return true, the delivery method will de displayed to the customer
     * If you return false, the delivery method will not be displayed
     *
     * @param Country $country the country to deliver to.
     *
     * @return boolean
     */
    public function isValidDelivery(Country $country)
    {
        // We just check the country and weight
        // the address could not be a valid address for TNT at this moment cp - city
        if ('FR' !== $country->getIsoalpha2()) {
            return false;
        }

        $cartWeight = $this->getRequest()->getSession()->getSessionCart()->getWeight();
        // TODO get the real max weight
        if ($cartWeight > 30) {
            return false;
        }

        return true;
    }

    /**
     * Calculate and return delivery price in the shop's default currency
     *
     * @param Country $country the country to deliver to.
     *
     * @return OrderPostage|float             the delivery price
     * @throws DeliveryException if the postage price cannot be calculated.
     */
    public function getPostage(Country $country)
    {

        $postage = new OrderPostage();

        $freeShipping = intval(self::getConfigValue(TNTFranceConfigValue::FREE_SHIPPING));

        if (0 !== $freeShipping) {
            $data = TNTFrance::getExtraOrderData($this->getRequest()->getSession()->getSessionCart());
            // todo get the price.
        }

        return $postage->getAmount();
    }

    /**
     *
     * This method return true if your delivery manages virtual product delivery.
     *
     * @return bool
     */
    public function handleVirtualProductDelivery()
    {
        return false;
    }

    /**
     * Retrieve delivery address associated to the order or the default address of the customer
     *
     * @return null|\Thelia\Model\Address
     */
    public static function getCartDeliveryAddress(Request $request)
    {
        $address = null;
        $session = $request->getSession();

        if (null !== $customer = $session->getCustomerUser()) {
            if (null !== $session->getOrder()
                && null !== $session->getOrder()->getChoosenDeliveryAddress()
                && null !== $currentDeliveryAddress = AddressQuery::create()->findPk($session->getOrder()->getChoosenDeliveryAddress())
            ) {
                $address = $currentDeliveryAddress;
            } else {
                $address = $customer->getDefaultAddress();
            }
        }

        return $address;
    }

    public static function getExtraOrderData($id, $isCart = true)
    {
        if ($isCart) {
            $data = MetaDataQuery::getVal(self::METADATA_KEY_ORDER, self::METADATA_CART_KEY, $id, []);
        } else {
            $data = MetaDataQuery::getVal(self::METADATA_KEY_ORDER, MetaData::ORDER_KEY, $id, []);
        }

        return $data;
    }

    public static function setExtraOrderData($id, $data, $isCart = true)
    {
        if ($isCart) {
            MetaDataQuery::setVal(self::METADATA_KEY_ORDER, self::METADATA_CART_KEY, $id, $data);
        } else {
            MetaDataQuery::setVal(self::METADATA_KEY_ORDER, MetaData::ORDER_KEY, $id, $data);
        }
    }


    protected function trans($id, $parameters = [], $locale = null)
    {
        if (null === $this->translator) {
            $this->translator = Translator::getInstance();
        }

        return $this->translator->trans($id, $parameters, self::MESSAGE_DOMAIN, $locale);
    }

    /**
     * @return string
     */
    public static function getUploadDirectory()
    {
        $uploadPath = THELIA_LOCAL_DIR . 'media' . DIRECTORY_SEPARATOR . 'tntfrance' . DIRECTORY_SEPARATOR;
        $fs = new Filesystem();

        if (!$fs->exists($uploadPath)) {
            $fs->mkdir($uploadPath);
        }

        return $uploadPath;
    }

    public static function getDisablePickUpDate($days = 30)
    {
        $dayTime = 24 * 60 * 60;
        $date = time();
        $disabledDates = [];

        for ($i = 1; $i <= $days; $i++) {
            // if hour > 15h, next day
            if ($i == 1 && date("G") >= 15) {

                $disabledDates[] = date('Y-m-d', $date);
                $date += $dayTime;
                continue;
            }

            // sam, dim
            if (date('N', $date) <= 5) {
                if (self::isNotWorkable($date)) {
                    //Date is incorrect
                    $disabledDates[] = date('Y-m-d', $date);
                }
            } else {
                $disabledDates[] = date('Y-m-d', $date);
            }

            $date += $dayTime;
        }

        return $disabledDates;
    }

    public static function isNotWorkable($date)
    {
        if ($date === null) {
            $date = time();
        }

        $date = strtotime(date('m/d/Y', $date));

        $year = date('Y', $date);

        $easterDate = easter_date($year);
        $easterDay = date('j', $easterDate);
        $easterMonth = date('n', $easterDate);
        $easterYear = date('Y', $easterDate);

        $holidays = array(
            // Dates fixes
            mktime(0, 0, 0, 1, 1, $year),  // 1er janvier
            mktime(0, 0, 0, 5, 1, $year),  // Fête du travail
            mktime(0, 0, 0, 5, 8, $year),  // Victoire des alliés
            mktime(0, 0, 0, 7, 14, $year),  // Fête nationale
            mktime(0, 0, 0, 8, 15, $year),  // Assomption
            mktime(0, 0, 0, 11, 1, $year),  // Toussaint
            mktime(0, 0, 0, 11, 11, $year),  // Armistice
            mktime(0, 0, 0, 12, 25, $year),  // Noel

            // Dates variables
            mktime(0, 0, 0, $easterMonth, $easterDay + 1, $easterYear), // Pâques
            mktime(0, 0, 0, $easterMonth, $easterDay + 39, $easterYear), // Ascension
            mktime(0, 0, 0, $easterMonth, $easterDay + 50, $easterYear), // Pentecôte
        );

        return in_array($date, $holidays);
    }
}
